<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iDealife]]></title>
  <subtitle><![CDATA[Stay hungry. Stay foolish.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://idealife.github.io/"/>
  <updated>2015-10-02T12:10:01.000Z</updated>
  <id>http://idealife.github.io/</id>
  
  <author>
    <name><![CDATA[Super Dong]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Apple Watch远程通知的实现以及真机实测]]></title>
    <link href="http://idealife.github.io/2015/10/02/Apple-Watch%E8%BF%9C%E7%A8%8B%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E7%9C%9F%E6%9C%BA%E5%AE%9E%E6%B5%8B/"/>
    <id>http://idealife.github.io/2015/10/02/Apple-Watch远程通知的实现以及真机实测/</id>
    <published>2015-10-02T09:09:55.000Z</published>
    <updated>2015-10-02T12:10:01.000Z</updated>
    <content type="html"><![CDATA[<p><strong>题记：</strong>任何一款优秀产品的背后都是一群为此呕心沥血的程序猿，前方多坑，注意避让！</p>
<p><strong>注意事项</strong><br>  1、真机测试的时候最方便的应该是使用adhoc证书，这个是苹果推送的要求。<br>  2、手表一定要戴在手腕上！手表一定要戴在手腕上！手表一定要戴在手腕上！重要的事情要说3遍。我曾傻傻地把手表放在桌上等通知，结果半天都没收到通知，通知全在手机上了。<br>  3、推送服务器的<code>JSON Payloads</code>格式一般需要重新调整。原先只有手机的时候alert只要有内容即可，现在需要分为title和body两部分了。如果要在手表中显示自定义通知样式，增加交互按钮，还需要category，内容要和watch的storyboard中的一直，否则将显示苹果默认的通知样式，只有一个关闭按钮。新结构如下：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="string">"aps"</span> : &#123;</span><br><span class="line">        <span class="string">"alert"</span> : &#123;</span><br><span class="line">            <span class="string">"title"</span> : <span class="string">"新通知"</span>,</span><br><span class="line">            <span class="string">"body"</span> : <span class="string">"OS X El Captain正式版今天推送......"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"category"</span>:<span class="string">"respond"</span>,</span><br><span class="line">        <span class="string">"badge"</span> : <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  、、、</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">**自定义推送通知样式的代码示例**</span><br><span class="line"><span class="number">1</span>、在手机app的AppDelegate中注册</span><br></pre></td></tr></table></figure></p>
<ul>
<li>(void)registerSettingsAndCategories {<br>// Create a mutable set to store the category definitions.<br>NSMutableSet* categories = [NSMutableSet set];</li>
</ul>
<p>// Define the actions for a meeting invite notification.<br>UIMutableUserNotificationAction<em> acceptAction = [[UIMutableUserNotificationAction alloc] init];<br>acceptAction.title = NSLocalizedString(@”Repondre”, @”Repondre commentaire”);<br>acceptAction.identifier = @”respond”;<br>acceptAction.activationMode = UIUserNotificationActivationModeForeground; //<em>*前台处理</em></em>.<br>acceptAction.authenticationRequired = NO;</p>
<p>UIMutableUserNotificationAction<em> declineAction = [[UIMutableUserNotificationAction alloc] init];<br>declineAction.title = NSLocalizedString(@”Decline”, @”Decline invitation”);<br>declineAction.identifier = @”decline”;<br>declineAction.activationMode = UIUserNotificationActivationModeBackground;//<em>*后台处理</em></em><br>declineAction.authenticationRequired = NO;</p>
<p>// Create the category object and add it to the set.<br>UIMutableUserNotificationCategory<em> inviteCategory = [[UIMutableUserNotificationCategory alloc] init];<br>[inviteCategory setActions:@[acceptAction,declineAction]<br>                forContext:UIUserNotificationActionContextDefault];<br>inviteCategory.identifier = @”respond”; //<em>*这一行很重要</em></em></p>
<p>[categories addObject:inviteCategory];</p>
<p>// Configure other actions and categories and add them to the set…</p>
<p>UIUserNotificationSettings* settings = [UIUserNotificationSettings settingsForTypes:<br>                                        (UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound)<br>                                                                         categories:categories];</p>
<p>[[UIApplication sharedApplication] registerUserNotificationSettings:settings];}<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上述代码是在 appdelegate 中的</span><br><span class="line"><span class="bullet">- </span>(BOOL )application:(UIApplication <span class="emphasis">*)application didFinishLaunchingWithOptions:(NSDictionary *</span>)launchOptions 调用的。</span><br><span class="line">2、设置推送服务器<span class="code">`Apns server`</span>的消息如下</span><br></pre></td></tr></table></figure></p>
<p>  {<br>    “aps” : {<br>        “alert” : {<br>            “title” : “新通知”,<br>            “body” : “OS X El Captain正式版今天推送……”,<br>        },<br>        “category”:”respond”,<br>        “badge” : 5,<br>    }<br>  }<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>、在WatchKitExtention中处理前台的按钮事件</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>(void)handleActionWithIdentifier:(NSString <em>)identifier forRemoteNotification:(NSDictionary </em>)remoteNotification{<br>   if ([identifier isEqualToString:@”Repondre”]) {</p>
<pre><code>//<span class="operator"><span class="keyword">Do</span> <span class="keyword">stuff</span> Here <span class="keyword">to</span> handle <span class="keyword">action</span>... </span>
</code></pre><p>   }<br>}</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>、 在手机端app的appDelegate中处理后台的按钮事件<span class="string">[暂未验证]</span>:</span><br></pre></td></tr></table></figure>
</li>
<li><p>(void)application:(UIApplication <em>)application handleActionWithIdentifier:(NSString </em>)identifier forRemoteNotification:(NSDictionary *)userInfo completionHandler:(void (^)())completionHandler {<br>   if ([identifier isEqualToString:@”Decline”]) {</p>
<pre><code>//<span class="operator"><span class="keyword">Do</span> <span class="keyword">stuff</span> Here <span class="keyword">to</span> handle <span class="keyword">action</span>... </span>
</code></pre><p>   }<br>  completionHandler();<br>}</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册为后台类型的按钮在手机的通知框中也会显示，在手机端的响应方式如下</span><br></pre></td></tr></table></figure>
</li>
<li><p>(void)application:(UIApplication <em>)application didReceiveRemoteNotification:(NSDictionary </em>)userInfo {<br>}<br>```</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>题记：</strong>任何一款优秀产品的背后都是一群为此呕心沥血的程序猿，前方多坑，注意避让！</p>
<p><strong>注意事项</strong><br>  1、真机测试的时候最方便的应该是使用adhoc证书，这个是苹果推送的要求。<br>  2、手]]>
    </summary>
    
      <category term="AppleWatch" scheme="http://idealife.github.io/tags/AppleWatch/"/>
    
      <category term="通知" scheme="http://idealife.github.io/tags/%E9%80%9A%E7%9F%A5/"/>
    
      <category term="iDev" scheme="http://idealife.github.io/categories/iDev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo部署时提示Fatal： Could not read from remote repository的问题处理]]></title>
    <link href="http://idealife.github.io/2015/10/02/Hexo%E9%83%A8%E7%BD%B2%E6%97%B6%E6%8F%90%E7%A4%BAfatal-Could-not-read-from-remote-repository%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>http://idealife.github.io/2015/10/02/Hexo部署时提示fatal-Could-not-read-from-remote-repository的问题处理/</id>
    <published>2015-10-02T01:41:26.000Z</published>
    <updated>2015-10-02T06:39:26.000Z</updated>
    <content type="html"><![CDATA[<p>第一次在Mac中配置好了hexo,发布的时候却一直提示：<br><code>Error: Permission denied (publickey).
fatal: Could not read from remote repository.</code><br>分析这个错误提示大致可以推断出是公钥配置的问题引起的。</p>
<p>但是github中我已经配置好了当前的公钥信息了，再次检查公钥。<br>0、github中公钥重新配置了一遍<br>1、git clone可以正确执行。<br>2、ssh -T idealife@github.com<br>也提示：Hi defnngj You’ve successfully authenticated, but GitHub does not provide shell access.<br>说明配置的公钥没有问题。<br>就是在执行sudo hexo deploy的时候报公钥问题。<br><a id="more"></a><br>为什么要加sudo呢？<br>在执行hexo命令时，如果不提权，就会一直提示db.json文件的写权限的错误：<br><code>Unhandled rejection Error: EACCES: permission denied, open &#39;/Users/idealife/Developer/blog/db.json&#39;
    at Error (native)</code><br>所以进行了权限提升。<br>以前一直是在window环境中配置，对于权限的认识比较浅。突然意识到，就是sudo引起的问题。</p>
<p>因为我生成公钥的命令是ssh-keygen -t rsa -C “idealife@github.com”<br>没有加sudo，生成的公钥是当前用户的，路径是 /Users/idealife/.ssh。而sudo hexo deploy命令执行的时候应该会去读取的root用户的公钥，很显然root下还没有对应的公钥信息生成。</p>
<p>随即立即验证这个推测。<br>1、为root生成publickey:sudo ssh-keygen -t rsa -C “idealife@github.com”，对应路径为/var/root/.ssh<br>2、提取公钥信息并配置到github中。问题又来了，在UI界面中是无法访问到/var下的root文件夹的。我们可以通过sudo cat /var/root/.ssh/id_rsa.pub可以绕开这个问题。<br>3、执行sudo hexo deploy，部署成功！</p>
<p>总结：在Linux或者UNIX环境中一定要注意权限问题！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次在Mac中配置好了hexo,发布的时候却一直提示：<br><code>Error: Permission denied (publickey).
fatal: Could not read from remote repository.</code><br>分析这个错误提示大致可以推断出是公钥配置的问题引起的。</p>
<p>但是github中我已经配置好了当前的公钥信息了，再次检查公钥。<br>0、github中公钥重新配置了一遍<br>1、git clone可以正确执行。<br>2、ssh -T idealife@github.com<br>也提示：Hi defnngj You’ve successfully authenticated, but GitHub does not provide shell access.<br>说明配置的公钥没有问题。<br>就是在执行sudo hexo deploy的时候报公钥问题。<br>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://idealife.github.io/tags/Hexo/"/>
    
      <category term="git" scheme="http://idealife.github.io/tags/git/"/>
    
      <category term="Hexo" scheme="http://idealife.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wacth app无法在watchOS2.0中安装的问题探索]]></title>
    <link href="http://idealife.github.io/2015/10/01/Wacth-app%E6%97%A0%E6%B3%95%E5%9C%A8Watch-OS2-0%E4%B8%AD%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2/"/>
    <id>http://idealife.github.io/2015/10/01/Wacth-app无法在Watch-OS2-0中安装的问题探索/</id>
    <published>2015-10-01T13:41:26.000Z</published>
    <updated>2015-10-02T05:52:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="问题描述：">问题描述：</h3><p>这段时间随着iOS9.0,以及watchOS2.0升级正式开启后，陆陆续续的就发现了很多问题。<br>其中一个情况就是，同事反映说，Apple Watch系统更新以后，testflight上的App无法安装watch app了，线上版本的App就能正常装上watch。<br>所以怀疑是苹果的证书验证机制可能变化了。毕竟Xcode7.0可以免$99真机调试了。<br><a id="more"></a></p>
<h3 id="探索">探索</h3><p>正好在做adhoc的签名包，也遇到了这个问题。</p>
<h5 id="组合1">组合1</h5><p>Xcode7.0 + iOS9.0 + watchOS2.0 + adhoc证书，直接编译App到真机中，结果安装Watch App就一直无法成功，在即将安装成功时，自动卸载，也无任何错误提示。</p>
<h5 id="组合2">组合2</h5><p>Xcode7.0 + iOS9.0 + watchOS1.0 + adhoc证书，就能很顺利的安装上了。<br>看来watchOS2的证书机制变化了。</p>
<h5 id="探索3">探索3</h5><p>因为线上版本没有问题，所以就准备用adhoc证书Archive的包，通过iTunes安装，这时Watch App又能顺利装上了watchOS2.0的系统了。<br>此时再用组合1的方式直接编译到手机，然后安装Watch App，竟然也成功安装上了。<br>可能是3的操作让Watch系统上存了授权信息，从而可以绕开了。</p>
<h3 id="相关">相关</h3><p>查了一下相关资料，发现在watchOS2.0 beta阶段有过类似的情况：<br><a href="https://forums.developer.apple.com/thread/9607" target="_blank" rel="external">Can anyone run watchOS2 beta 3 apps on the watch device while debugging with Xcode?</a><br>其中提到：<br>Update: I can run (not debug) every time on the watch by installing an ad hoc distribution through iTunes.<br>1、Product -&gt; Archive  [You may have some code signing issues to figure out here–especially if you have multiple people who sign the builds for your organization.]<br>2、Export… -&gt; for Ad Hoc Distribution<br>3、Uninstall the app from your iPhone.<br>4、Drop the ipa file onto iTunes.<br>5、Select your iPhone in iTunes, go to the Apps tab, and find the app you just dropped in.<br>6、Click install.<br>7、Click apply.<br>8、Make sure that “Show App on Apple Watch” is selected in the Apple Watch app, and wait for it to install.<br>It should run at least.  I wasn’t abble to attach the debugger to the processes, but I was able to see the performance of the changes that I had already tested on the simulator.<br>The good news is that performance of button and table responsiveness is probably 10x that of beta 2 if you have lots of buttons.  It was tough to get it to run, but I feel like there was a treasure at the end of the hunt. </p>
<h3 id="总结">总结</h3><p>因为苹果系统的封闭性，无法探索出更加有具体的原因。可能马上就会有官方的说明出来！<br>如果你又更好地解答，欢迎留言！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="问题描述：">问题描述：</h3><p>这段时间随着iOS9.0,以及watchOS2.0升级正式开启后，陆陆续续的就发现了很多问题。<br>其中一个情况就是，同事反映说，Apple Watch系统更新以后，testflight上的App无法安装watch app了，线上版本的App就能正常装上watch。<br>所以怀疑是苹果的证书验证机制可能变化了。毕竟Xcode7.0可以免$99真机调试了。<br>]]>
    
    </summary>
    
      <category term="Apple Watch" scheme="http://idealife.github.io/tags/Apple-Watch/"/>
    
      <category term="Xcode7.0" scheme="http://idealife.github.io/tags/Xcode7-0/"/>
    
      <category term="watchOS2.0" scheme="http://idealife.github.io/tags/watchOS2-0/"/>
    
      <category term="iDev" scheme="http://idealife.github.io/categories/iDev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开卷有益]]></title>
    <link href="http://idealife.github.io/2015/10/01/hello-world/"/>
    <id>http://idealife.github.io/2015/10/01/hello-world/</id>
    <published>2015-10-01T12:41:26.000Z</published>
    <updated>2015-10-02T06:46:45.000Z</updated>
    <content type="html"><![CDATA[<p>由于没有备份原来的hexo模板，换了电脑后就不得不重新把这个残局收拾起来。<br>这个教训很深刻。<br>关于如何<a href="http://nodlee.com/2015/06/07/how-to-porting-hexo/#more" target="_blank" rel="external">移植</a>,可以参考这篇<a href="http://nodlee.com/2015/06/07/how-to-porting-hexo/#more" target="_blank" rel="external">文章</a></p>
<hr>
<h2 id="Hello_Github">Hello Github</h2><p>Github是一个神奇的网站，简直就是一个超级大的宝库，<br>接触越多就越能发现它的价值！</p>
<p>因此在这个平台上分享也是一件非常有意义的事情！<br>Leg’s go!</p>
<hr>
<p>在CSDN断断续续经营了几年的<a href="http://blog.csdn.net/qustdong/" target="_blank" rel="external">博客</a>最终还是会被现有的Github Pages所取代,虽然它的SEO已经做的非常不错了，但是这几年来的排版一直让我很痛苦。最近也增加了Markdown语法的支持，那也无法阻止我来到这片干净的乐土！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于没有备份原来的hexo模板，换了电脑后就不得不重新把这个残局收拾起来。<br>这个教训很深刻。<br>关于如何<a href="http://nodlee.com/2015/06/07/how-to-porting-hexo/#more" target="_blank"]]>
    </summary>
    
  </entry>
  
</feed>
